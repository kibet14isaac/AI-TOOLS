# -*- coding: utf-8 -*-
"""fixed.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SII9wZIPcZhK2t9wA7i5gEXdCmEoNySh
"""

import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.utils import to_categorical
import numpy as np # Import numpy for shape manipulation

# Load the MNIST dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()

print("Original X_train shape:", X_train.shape)

# Fix 1: Reshape data to include a channel dimension
X_train = X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32')
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1).astype('float32')

# Normalize pixel values
X_train /= 255
X_test /= 255

print("Reshaped X_train shape:", X_train.shape)

# Convert labels to one-hot encoding
num_classes = 10
y_train = to_categorical(y_train, num_classes)
y_test = to_categorical(y_test, num_classes)

# Build the CNN model
model = Sequential([
    # Fix 2: Correct input_shape to include the channel dimension
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)), # FIXED
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

print("\nStarting training with fixed code...")
# This will now run successfully
history = model.fit(X_train, y_train, epochs=5, batch_size=128, validation_split=0.1, verbose=1)

loss, accuracy = model.evaluate(X_test, y_test, verbose=0)
print(f"\nFixed Code Test Accuracy: {accuracy:.4f}")