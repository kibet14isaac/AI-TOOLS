# -*- coding: utf-8 -*-
"""NLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13bpMzlZjLY3MA_1aKQ-K1ztjWdGUx0sr
"""

import spacy

# Load a pre-trained English model (small or medium will work for NER)
# You might need to download it first if you haven't: python -m spacy download en_core_web_sm
try:
    nlp = spacy.load("en_core_web_sm")
except OSError:
    print("Downloading en_core_web_sm model...")
    spacy.cli.download("en_core_web_sm")
    nlp = spacy.load("en_core_web_sm")

# Sample Amazon Product Reviews
amazon_reviews = [
    "The new iPhone 15 Pro is amazing! The camera quality is exceptional. Highly recommend Apple products.",
    "This Samsung Galaxy S23 Ultra has a fantastic display, but the battery life could be better.",
    "I bought a Sony WH-1000XM5 headphones. Noise cancellation is top-notch. Great audio.",
    "The XYZ Smartwatch had issues connecting to my phone. Disappointing product from a lesser-known brand.",
    "Logitech MX Master 3S mouse is incredibly ergonomic and precise. A must-have for productivity.",
    "My Kindle Paperwhite is perfect for reading. Amazon makes great e-readers.",
    "This Dyson V11 vacuum cleaner is powerful but a bit expensive. Still, worth it for the performance.",
    "Google Pixel 7 takes stunning photos. The software experience is also very smooth.",
    "The Bose QuietComfort Earbuds II offer excellent sound and comfort. Very happy with this purchase."
]

print("--- Named Entity Recognition (NER) ---")
extracted_entities = []

for i, review in enumerate(amazon_reviews):
    doc = nlp(review)
    print(f"\nReview {i+1}: \"{review}\"")
    entities_in_review = []
    for ent in doc.ents:
        # Filter for common entity types that might represent products/brands
        # ORG: Organizations, PRODUCT: Products, GPE: Geo-Political Entity (sometimes used for brands), NORP (nationalities/religious/political groups - sometimes related to brands)
        # Note: 'PRODUCT' entity type is more common in larger models like en_core_web_md/lg or custom trained models.
        # For 'en_core_web_sm', you often look for ORG, GPE, or proper nouns (PROPN).
        if ent.label_ in ["ORG", "PRODUCT", "GPE", "NORP"] or ent.text.istitle(): # Heuristic for potential product/brand
            entities_in_review.append((ent.text, ent.label_))
            print(f"  Entity: {ent.text}, Label: {ent.label_}")
    if not entities_in_review:
        print("  No significant entities extracted for product/brand.")
    extracted_entities.append(entities_in_review)


print("\n--- Rule-Based Sentiment Analysis ---")
# Define keywords for positive and negative sentiment
positive_keywords = ["amazing", "exceptional", "fantastic", "top-notch", "great", "ergonomic", "precise", "perfect", "powerful", "stunning", "smooth", "excellent", "happy", "worth it"]
negative_keywords = ["could be better", "issues", "disappointing", "expensive"]

sentiment_results = []

for i, review in enumerate(amazon_reviews):
    doc = nlp(review.lower()) # Convert to lowercase for consistent keyword matching
    sentiment = "neutral"
    score = 0

    # Check for positive keywords
    for keyword in positive_keywords:
        if keyword in doc.text:
            score += 1

    # Check for negative keywords
    for keyword in negative_keywords:
        if keyword in doc.text:
            score -= 1

    if score > 0:
        sentiment = "positive"
    elif score < 0:
        sentiment = "negative"
    else:
        sentiment = "neutral" # If score is 0, no strong sentiment detected

    sentiment_results.append((review, sentiment, score))
    print(f"\nReview {i+1}: \"{review}\"")
    print(f"  Sentiment: {sentiment} (Score: {score})")

print("\n--- Summary of Extracted Entities and Sentiment ---")
for i, review in enumerate(amazon_reviews):
    print(f"\nReview {i+1}:")
    print(f"  Text: {review}")
    print(f"  Entities: {[ent for ent, label in extracted_entities[i]]}")
    print(f"  Sentiment: {sentiment_results[i][1]}")